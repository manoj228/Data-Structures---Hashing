//Time complexity : O(n)
#include <bits/stdc++.h>
using namespace std;

vector<pair<int,int>> findSubarrays(int a[],int n)
{
    //starting index to ending index
    vector<pair<int,int>> vp;
    
    //sum and its index in array
    unordered_map<int, vector<int>> mp;
    
    int sum = 0;
    
    for(int i=0;i<n;i++)
    {
        sum += a[i];
        
        if(sum == 0)
        vp.push_back(make_pair(0,i));
            
        if(mp.find(sum)!=mp.end())
        {
            vector<int> v = mp[sum];
            for(auto it=v.begin(); it!=v.end(); it++)
            vp.push_back(make_pair(*it+1,i));
        }
        
        mp[sum].push_back(i);
    }
    return vp;
}

void printValue(vector<pair<int,int>> vp)
{
    for(auto it = vp.begin(); it != vp.end(); it++)
    printf("%d %d\n",it->first,it->second);
}

int main()
{
  int a[] = {6, 3, -1, -3, 4, -2, 2, 4, 6, -12, -7}; 
  int n = sizeof(a)/sizeof(a[0]);
  
  vector<pair<int,int>> vp = findSubarrays(a,n);
  
  if(!vp.size())
  printf("No pairs found");
  else
  printValue(vp);

    return 0;
}
