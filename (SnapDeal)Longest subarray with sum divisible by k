//Time complexity : O(n)

#include <bits/stdc++.h>
using namespace std;

int longSubarayWithDivByk(int a[],int n,int k)
{
    unordered_map<int,int> um;
    
    int cur_sum = 0, max = 0;
    //sum[0...i]%k
    int mod_arr[n];
    
    for(int i=0;i<n;i++)
    {
        cur_sum += a[i];
        
        mod_arr[i] = ((cur_sum % k) + k) % k; 
    }
    
    for(int i=0;i<n;i++)
    {
        //sum(0....i) divisible by k 
        if(mod_arr[i] == 0)
        max = i + 1;
        
        else if(um.find(mod_arr[i]) == um.end())
        um[mod_arr[i]] = i;
        
        else 
        {
            if(max < i - um[mod_arr[i]])
            max = i - um[mod_arr[i]];
        }
    }
    
    return max;
}
int main()
{
    int arr[] = {2, 7, 6, 1, 4, 5}; 
    int n = sizeof(arr) / sizeof(arr[0]); 
    int k = 3; 
    
    printf("%d ",longSubarayWithDivByk(arr,n,k));
    
    return 0;
}
